
import time  
from simpleai.search import (
    CspProblem,  # L·ªõp c∆° s·ªü ƒë·ªÉ ƒë·ªãnh nghƒ©a m·ªôt b√†i to√°n CSP
    backtrack,  # Thu·∫≠t to√°n gi·∫£i CSP b·∫±ng ph∆∞∆°ng ph√°p quay lui
    MOST_CONSTRAINED_VARIABLE,  # Heuristic: ∆∞u ti√™n bi·∫øn c√≥ √≠t gi√° tr·ªã h·ª£p l·ªá c√≤n l·∫°i nh·∫•t
    LEAST_CONSTRAINING_VALUE,  # Heuristic: ∆∞u ti√™n gi√° tr·ªã lo·∫°i b·ªè √≠t l·ª±a ch·ªçn nh·∫•t c·ªßa c√°c bi·∫øn l√¢n c·∫≠n
    HIGHEST_DEGREE_VARIABLE,  # Heuristic: ∆∞u ti√™n bi·∫øn c√≥ nhi·ªÅu r√†ng bu·ªôc v·ªõi c√°c bi·∫øn kh√°c nh·∫•t
)

# ================== Ph·∫ßn 1: ƒê·ªãnh nghƒ©a b√†i to√°n N-Queens ==================
def create_n_queens_problem(n=5):
    '''
    H√†m n√†y t·∫°o ra m·ªôt ƒë·ªëi t∆∞·ª£ng b√†i to√°n N-Queens d∆∞·ªõi d·∫°ng CSP (Constraint Satisfaction Problem).
    - Bi·∫øn (Variables): M·ªói qu√¢n h·∫≠u tr√™n m·ªôt h√†ng l√† m·ªôt bi·∫øn. V√≠ d·ª•: Q0, Q1, ..., Q(n-1).
    - Mi·ªÅn gi√° tr·ªã (Domains): V·ªã tr√≠ c·ªôt m√† m·ªói qu√¢n h·∫≠u c√≥ th·ªÉ ƒë∆∞·ª£c ƒë·∫∑t. V√≠ d·ª•: [0, 1, ..., n-1].
    - R√†ng bu·ªôc (Constraints): C√°c ƒëi·ªÅu ki·ªán ƒë·ªÉ c√°c qu√¢n h·∫≠u kh√¥ng "ƒÉn" nhau.
    '''
    
    # T·∫°o danh s√°ch c√°c bi·∫øn, m·ªói bi·∫øn t∆∞∆°ng ·ª©ng v·ªõi m·ªôt h√†ng tr√™n b√†n c·ªù.
    # V√≠ d·ª• v·ªõi n=4, ta c√≥ ['Q0', 'Q1', 'Q2', 'Q3'].
    variables = [f'Q{i}' for i in range(n)]
    
    # T·∫°o mi·ªÅn gi√° tr·ªã cho m·ªói bi·∫øn. M·ªói qu√¢n h·∫≠u (bi·∫øn) c√≥ th·ªÉ ƒë∆∞·ª£c ƒë·∫∑t ·ªü b·∫•t k·ª≥ c·ªôt n√†o t·ª´ 0 ƒë·∫øn n-1.
    domains = {var: list(range(n)) for var in variables}

    # Kh·ªüi t·∫°o danh s√°ch ƒë·ªÉ ch·ª©a c√°c r√†ng bu·ªôc.
    constraints = []

    # ƒê·ªãnh nghƒ©a h√†m ki·ªÉm tra r√†ng bu·ªôc cho hai qu√¢n h·∫≠u.
    def not_attacking(variables, values):
        '''
        H√†m n√†y l√† m·ªôt r√†ng bu·ªôc, tr·∫£ v·ªÅ True n·∫øu hai qu√¢n h·∫≠u kh√¥ng t·∫•n c√¥ng nhau.
        - `variables`: m·ªôt tuple ch·ª©a t√™n c·ªßa hai bi·∫øn (v√≠ d·ª•: ('Q1', 'Q3')).
        - `values`: m·ªôt tuple ch·ª©a gi√° tr·ªã (c·ªôt) c·ªßa hai bi·∫øn ƒë√≥ (v√≠ d·ª•: (2, 4)).
        '''
        # L·∫•y ch·ªâ s·ªë h√†ng t·ª´ t√™n bi·∫øn (v√≠ d·ª•: 'Q1' -> 1).
        row1 = int(variables[0][1:])
        row2 = int(variables[1][1:])
        # L·∫•y gi√° tr·ªã c·ªôt.
        col1, col2 = values

        # Hai qu√¢n h·∫≠u kh√¥ng t·∫•n c√¥ng nhau n·∫øu ch√∫ng kh√¥ng c√πng c·ªôt V√Ä kh√¥ng c√πng ƒë∆∞·ªùng ch√©o.
        # - C√πng c·ªôt: col1 == col2
        # - C√πng ƒë∆∞·ªùng ch√©o: abs(row1 - row2) == abs(col1 - col2)
        return col1 != col2 and abs(row1 - row2) != abs(col1 - col2)

    # T·∫°o r√†ng bu·ªôc cho m·ªçi c·∫∑p qu√¢n h·∫≠u kh√°c nhau tr√™n b√†n c·ªù.
    # V√≠ d·ª•: (Q0, Q1), (Q0, Q2), ..., (Q(n-2), Q(n-1)).
    for i in range(n):
        for j in range(i + 1, n):
            constraints.append(((f'Q{i}', f'Q{j}'), not_attacking))

    # Tr·∫£ v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng CspProblem ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ƒë·∫ßy ƒë·ªß.
    return CspProblem(variables, domains, constraints)


# ================== Ph·∫ßn 2: H√†m gi·∫£i b√†i to√°n v√† ƒëo l∆∞·ªùng hi·ªáu su·∫•t ==================
def solve_and_measure(problem, variable_heuristic=None, value_heuristic=None, inference=False):
    '''
    H√†m n√†y nh·∫≠n m·ªôt b√†i to√°n CSP v√† c√°c t√πy ch·ªçn, sau ƒë√≥ gi·∫£i n√≥ v√† ƒëo th·ªùi gian.
    - `problem`: ƒê·ªëi t∆∞·ª£ng CspProblem c·∫ßn gi·∫£i.
    - `variable_heuristic`: Chi·∫øn l∆∞·ª£c ch·ªçn bi·∫øn ti·∫øp theo (v√≠ d·ª•: MOST_CONSTRAINED_VARIABLE).
    - `value_heuristic`: Chi·∫øn l∆∞·ª£c ch·ªçn gi√° tr·ªã cho bi·∫øn (v√≠ d·ª•: LEAST_CONSTRAINING_VALUE).
    - `inference`: B·∫≠t/t·∫Øt suy lu·∫≠n (v√≠ d·ª•: Forward Checking).
    '''
    # Ghi l·∫°i th·ªùi ƒëi·ªÉm b·∫Øt ƒë·∫ßu.
    start_time = time.time()
    
    # G·ªçi h√†m `backtrack` c·ªßa simpleai ƒë·ªÉ t√¨m nghi·ªám.
    solution = backtrack(
        problem,
        variable_heuristic=variable_heuristic,
        value_heuristic=value_heuristic,
        inference=inference,
    )
    
    # Ghi l·∫°i th·ªùi ƒëi·ªÉm k·∫øt th√∫c.
    end_time = time.time()

    # Tr·∫£ v·ªÅ m·ªôt dictionary ch·ª©a nghi·ªám v√† t·ªïng th·ªùi gian gi·∫£i.
    return {
        'solution': solution,  # Nghi·ªám t√¨m ƒë∆∞·ª£c (ho·∫∑c None n·∫øu kh√¥ng c√≥ nghi·ªám)
        'time': end_time - start_time,  # Th·ªùi gian th·ª±c thi
    }

# ================== Ph·∫ßn 3: C√°c h√†m hi·ªÉn th·ªã k·∫øt qu·∫£ ==================
def print_solution_array(solution, n):
    '''
    Hi·ªÉn th·ªã nghi·ªám t√¨m ƒë∆∞·ª£c d∆∞·ªõi d·∫°ng m·ªôt m·∫£ng ƒë∆°n gi·∫£n.
    - Ch·ªâ s·ªë c·ªßa m·∫£ng l√† h√†ng.
    - Gi√° tr·ªã t·∫°i m·ªói ch·ªâ s·ªë l√† c·ªôt ƒë·∫∑t qu√¢n h·∫≠u.
    V√≠ d·ª•: [1, 3, 0, 2] nghƒ©a l√†:
      - H√†ng 0, c·ªôt 1
      - H√†ng 1, c·ªôt 3
      - H√†ng 2, c·ªôt 0
      - H√†ng 3, c·ªôt 2
    '''
    if not solution:
        print("‚ùå Kh√¥ng c√≥ nghi·ªám.")
        return

    # Chuy·ªÉn ƒë·ªïi t·ª´ ƒë·ªãnh d·∫°ng dictionary c·ªßa simpleai sang m·∫£ng.
    result = [0] * n
    for var, col in solution.items():
        row = int(var[1:])
        result[row] = col
    print(f"üìå Nghi·ªám t√¨m ƒë∆∞·ª£c (d·∫°ng m·∫£ng): {result}")
    return result

def print_board(solution, n):
    '''
    Hi·ªÉn th·ªã b√†n c·ªù m·ªôt c√°ch tr·ª±c quan t·ª´ nghi·ªám ƒë√£ t√¨m ƒë∆∞·ª£c.
    'Q' ƒë·∫°i di·ªán cho qu√¢n h·∫≠u, '.' ƒë·∫°i di·ªán cho √¥ tr·ªëng.
    '''
    if not solution:
        print("‚ùå Kh√¥ng t√¨m th·∫•y nghi·ªám ƒë·ªÉ hi·ªÉn th·ªã b√†n c·ªù.")
        return

    # T·∫°o m·ªôt b√†n c·ªù r·ªóng.
    board = [['.' for _ in range(n)] for _ in range(n)]
    
    # ƒê·∫∑t c√°c qu√¢n h·∫≠u v√†o b√†n c·ªù d·ª±a tr√™n nghi·ªám.
    for var, col in solution.items():
        row = int(var[1:])
        board[row][col] = 'Q'

    # In b√†n c·ªù ra m√†n h√¨nh.
    for row_data in board:
        print(' '.join(row_data))


# ================== Ph·∫ßn 4: Kh·ªëi th·ª±c thi ch√≠nh ==================
if __name__ == "__main__":
    # --- C·∫•u h√¨nh ---
    N = 5  # K√≠ch th∆∞·ªõc b√†n c·ªù (b·∫°n c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã n√†y, v√≠ d·ª•: 8, 10, ...).
    print(f"=== Gi·∫£i b√†i to√°n N-Queens v·ªõi N={N} ===\n")

    # --- ƒê·ªãnh nghƒ©a c√°c chi·∫øn l∆∞·ª£c c·∫ßn th·ª≠ nghi·ªám ---
    # M·ªói chi·∫øn l∆∞·ª£c l√† m·ªôt tuple: (T√™n, tham s·ªë cho variable_heuristic, tham s·ªë cho value_heuristic/inference)
    strategies = [
        # 1. Kh√¥ng d√πng heuristic n√†o c·∫£.
        ("C∆° b·∫£n (Kh√¥ng heuristic)", {}, {}),
        
        # 2. Ch·ªâ d√πng heuristic ch·ªçn bi·∫øn (Most Constrained Variable).
        ("Most Constrained Variable (MCV)", {"variable_heuristic": MOST_CONSTRAINED_VARIABLE}, {}),
        
        # 3. Ch·ªâ d√πng heuristic ch·ªçn gi√° tr·ªã (Least Constraining Value).
        ("Least Constraining Value (LCV)", {}, {"value_heuristic": LEAST_CONSTRAINING_VALUE}),
        
        # 4. K·∫øt h·ª£p c·∫£ hai heuristic tr√™n.
        ("MCV + LCV", {"variable_heuristic": MOST_CONSTRAINED_VARIABLE}, {"value_heuristic": LEAST_CONSTRAINING_VALUE}),
        
        # 5. D√πng heuristic b·∫≠c (Degree Heuristic).
        ("Degree Heuristic", {"variable_heuristic": HIGHEST_DEGREE_VARIABLE}, {}),
        
        # 6. D√πng k·ªπ thu·∫≠t suy lu·∫≠n Forward Checking.
        ("Forward Checking", {}, {"inference": True}),
    ]

    # Danh s√°ch ƒë·ªÉ l∆∞u k·∫øt qu·∫£ c·ªßa m·ªói l·∫ßn ch·∫°y.
    results = []

    # --- Ch·∫°y v√† so s√°nh c√°c chi·∫øn l∆∞·ª£c ---
    # V√≤ng l·∫∑p qua t·ª´ng chi·∫øn l∆∞·ª£c ƒë√£ ƒë·ªãnh nghƒ©a.
    for name, var_params, other_params in strategies:
        print(f"\n‚ñ∂ ƒêang ch·∫°y chi·∫øn l∆∞·ª£c: {name}")
        
        # T·∫°o l·∫°i b√†i to√°n cho m·ªói l·∫ßn ch·∫°y ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh c√¥ng b·∫±ng.
        problem = create_n_queens_problem(N)
        
        # Gi·∫£i b√†i to√°n v·ªõi chi·∫øn l∆∞·ª£c hi·ªán t·∫°i v√† ƒëo th·ªùi gian.
        # D·∫•u ** d√πng ƒë·ªÉ "gi·∫£i n√©n" dictionary th√†nh c√°c tham s·ªë keyword.
        result = solve_and_measure(problem, **var_params, **other_params)
        
        print(f"‚è±Ô∏è  Th·ªùi gian: {result['time']:.6f}s")
        
        # Hi·ªÉn th·ªã nghi·ªám t√¨m ƒë∆∞·ª£c.
        print_solution_array(result['solution'], N)
        print_board(result['solution'], N)
        
        # L∆∞u l·∫°i k·∫øt qu·∫£ ƒë·ªÉ so s√°nh cu·ªëi c√πng.
        results.append((name, result['time']))

    # ================== Ph·∫ßn 5: In b·∫£ng so s√°nh t·ªïng k·∫øt ==================
    print("\n\n=== B·∫£ng so s√°nh hi·ªáu qu·∫£ c√°c chi·∫øn l∆∞·ª£c ===")
    print(f"{'Chi·∫øn l∆∞·ª£c':<35} | {'Th·ªùi gian (gi√¢y)':<10}")
    print("-" * 55)
    # S·∫Øp x·∫øp k·∫øt qu·∫£ t·ª´ nhanh nh·∫•t ƒë·∫øn ch·∫≠m nh·∫•t.
    results.sort(key=lambda x: x[1])
    for name, t in results:
        print(f"{name:<35} | {t:<10.6f}")