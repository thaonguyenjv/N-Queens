import time
from simpleai.search import (
    CspProblem,
    backtrack,
    MOST_CONSTRAINED_VARIABLE,
    LEAST_CONSTRAINING_VALUE,
    HIGHEST_DEGREE_VARIABLE,
)

# ================== T·∫°o b√†i to√°n N-Queens ==================
def create_n_queens_problem(n=5):
    """
    T·∫°o b√†i to√°n N-Queens d∆∞·ªõi d·∫°ng CSP (Constraint Satisfaction Problem).
    - M·ªói bi·∫øn: Q0, Q1, ..., Q(n-1) (·ª©ng v·ªõi h√†ng).
    - Mi·ªÅn gi√° tr·ªã: [0..n-1] (·ª©ng v·ªõi c·ªôt ƒë·∫∑t qu√¢n h·∫≠u).
    - R√†ng bu·ªôc: kh√¥ng ƒë∆∞·ª£c c√πng c·ªôt v√† kh√¥ng ƒë∆∞·ª£c c√πng ƒë∆∞·ªùng ch√©o.
    """
    variables = [f'Q{i}' for i in range(n)]
    domains = {var: list(range(n)) for var in variables}

    constraints = []

    def not_attacking(variables, values):
        """
        H√†m ki·ªÉm tra r√†ng bu·ªôc:
        - Kh√¥ng c√πng c·ªôt
        - Kh√¥ng c√πng ƒë∆∞·ªùng ch√©o
        """
        row1 = int(variables[0][1:])
        row2 = int(variables[1][1:])
        col1, col2 = values

        return col1 != col2 and abs(row1 - row2) != abs(col1 - col2)

    # Th√™m r√†ng bu·ªôc cho m·ªçi c·∫∑p qu√¢n h·∫≠u
    for i in range(n):
        for j in range(i + 1, n):
            constraints.append(((f'Q{i}', f'Q{j}'), not_attacking))

    return CspProblem(variables, domains, constraints)


# ================== Gi·∫£i & ƒëo th·ªùi gian ==================
def solve_and_measure(problem, variable_heuristic=None, value_heuristic=None, inference=False):
    """
    Gi·∫£i CSP b·∫±ng backtracking v·ªõi c√°c heuristic kh√°c nhau.
    Tr·∫£ v·ªÅ nghi·ªám v√† th·ªùi gian ch·∫°y.
    """
    start_time = time.time()
    solution = backtrack(
        problem,
        variable_heuristic=variable_heuristic,
        value_heuristic=value_heuristic,
        inference=inference,
    )
    end_time = time.time()

    return {
        'solution': solution,
        'time': end_time - start_time,
    }

# ================== Hi·ªÉn th·ªã nghi·ªám ==================
def print_solution_array(solution, n):
    """
    Hi·ªÉn th·ªã nghi·ªám d∆∞·ªõi d·∫°ng m·∫£ng:
    - Ch·ªâ s·ªë: h√†ng (row)
    - Gi√° tr·ªã: c·ªôt (col) ƒë·∫∑t qu√¢n h·∫≠u
    """
    if not solution:
        print("‚ùå Kh√¥ng c√≥ nghi·ªám.")
        return

    result = [0] * n
    for var, col in solution.items():
        row = int(var[1:])
        result[row] = col
    print(f"üìåNghi·ªám t√¨m ƒë∆∞·ª£c: {result}")
    return result

# ================== Hi·ªÉn th·ªã b√†n c·ªù ==================
def print_board(solution, n):
    """
    Hi·ªÉn th·ªã b√†n c·ªù tr·ª±c quan t·ª´ nghi·ªám.
    """
    if not solution:
        print("‚ùå Kh√¥ng t√¨m th·∫•y nghi·ªám.")
        return

    board = [['.' for _ in range(n)] for _ in range(n)]
    for var, col in solution.items():
        row = int(var[1:])
        board[row][col] = 'Q'

    for row in board:
        print(' '.join(row))


# ================== Main ==================
if __name__ == "__main__":
    N = 5  # b·∫°n c√≥ th·ªÉ ƒë·ªïi N t·∫°i ƒë√¢y
    print(f"=== Gi·∫£i b√†i to√°n N-Queens v·ªõi N={N} ===\n")

    strategies = [
        ("C∆° b·∫£n (Kh√¥ng heuristic)", {}, {}),
        ("Most Constrained Variable (MCV)", {"variable_heuristic": MOST_CONSTRAINED_VARIABLE}, {}),
        ("Least Constraining Value (LCV)", {}, {"value_heuristic": LEAST_CONSTRAINING_VALUE}),
        ("MCV + LCV", {"variable_heuristic": MOST_CONSTRAINED_VARIABLE}, {"value_heuristic": LEAST_CONSTRAINING_VALUE}),
        ("Degree Heuristic", {"variable_heuristic": HIGHEST_DEGREE_VARIABLE}, {}),
        ("Forward Checking", {}, {"inference": True}),
    ]

    results = []

    # Ch·∫°y l·∫ßn l∆∞·ª£t c√°c chi·∫øn l∆∞·ª£c
    for name, var_params, val_params in strategies:
        print(f"\n‚ñ∂ Chi·∫øn l∆∞·ª£c: {name}")
        problem = create_n_queens_problem(N)
        result = solve_and_measure(problem, **var_params, **val_params)
        print(f"‚è±Ô∏è Th·ªùi gian: {result['time']:.4f}s")
        # Hi·ªÉn th·ªã nghi·ªám d∆∞·ªõi d·∫°ng m·∫£ng
        arr=print_solution_array(result['solution'], N)
        print_board(result['solution'], N)
        # L∆∞u k·∫øt qu·∫£
        results.append((name, result['time']))

    # ================== B·∫£ng so s√°nh ==================
    print("\n=== B·∫£ng so s√°nh hi·ªáu qu·∫£ ===")
    print(f"{'Chi·∫øn l∆∞·ª£c':<30} | {'Th·ªùi gian (s)':<10}")
    print("-" * 45)
    for name, t in results:
        print(f"{name:<30} | {t:<10.4f}")
